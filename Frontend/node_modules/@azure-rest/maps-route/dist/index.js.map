{"version":3,"file":"index.js","sources":["../src/generated/mapsRouteClient.ts","../src/generated/isUnexpected.ts","../src/generated/pollingHelper.ts","../src/mapsRoute.ts","../src/helpers.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { MapsRouteClient } from \"./clientDefinitions\";\n\n/**\n * Initialize a new instance of the class MapsRouteClient class.\n * @param credentials type: KeyCredential\n */\nexport default function createClient(\n  credentials: KeyCredential,\n  options: ClientOptions = {}\n): MapsRouteClient {\n  const baseUrl = options.baseUrl ?? `https://atlas.microsoft.com`;\n  options.apiVersion = options.apiVersion ?? \"1.0\";\n  options = {\n    ...options,\n    credentials: {\n      apiKeyHeaderName: \"subscription-key\"\n    }\n  };\n\n  const userAgentInfo = `azsdk-js-maps-route-rest/1.0.0-beta.1`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix\n    }\n  };\n\n  const client = getClient(baseUrl, credentials, options) as MapsRouteClient;\n\n  return client;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  RouteRequestRouteMatrixSync200Response,\n  RouteRequestRouteMatrixSync408Response,\n  RouteRequestRouteMatrixSyncDefaultResponse,\n  RouteGetRouteDirections200Response,\n  RouteGetRouteDirectionsDefaultResponse,\n  RouteGetRouteDirectionsWithAdditionalParameters200Response,\n  RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse,\n  RouteGetRouteRange200Response,\n  RouteGetRouteRangeDefaultResponse,\n  RouteRequestRouteDirectionsBatchSync200Response,\n  RouteRequestRouteDirectionsBatchSync408Response,\n  RouteRequestRouteDirectionsBatchSyncDefaultResponse\n} from \"./responses\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /route/matrix/{format}\": [\"200\", \"202\"],\n  \"GET /route/matrix/{format}\": [\"200\", \"202\"],\n  \"POST /route/matrix/sync/{format}\": [\"200\"],\n  \"GET /route/directions/{format}\": [\"200\"],\n  \"POST /route/directions/{format}\": [\"200\"],\n  \"GET /route/range/{format}\": [\"200\"],\n  \"POST /route/directions/batch/{format}\": [\"200\", \"202\"],\n  \"GET /route/directions/batch/{format}\": [\"200\", \"202\"],\n  \"POST /route/directions/batch/sync/{format}\": [\"200\"]\n};\n\nexport function isUnexpected(\n  response:\n    | RouteRequestRouteMatrixSync200Response\n    | RouteRequestRouteMatrixSync408Response\n    | RouteRequestRouteMatrixSyncDefaultResponse\n): response is RouteRequestRouteMatrixSync408Response;\nexport function isUnexpected(\n  response:\n    | RouteGetRouteDirections200Response\n    | RouteGetRouteDirectionsDefaultResponse\n): response is RouteGetRouteDirectionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | RouteGetRouteDirectionsWithAdditionalParameters200Response\n    | RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse\n): response is RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse;\nexport function isUnexpected(\n  response: RouteGetRouteRange200Response | RouteGetRouteRangeDefaultResponse\n): response is RouteGetRouteRangeDefaultResponse;\nexport function isUnexpected(\n  response:\n    | RouteRequestRouteDirectionsBatchSync200Response\n    | RouteRequestRouteDirectionsBatchSync408Response\n    | RouteRequestRouteDirectionsBatchSyncDefaultResponse\n): response is RouteRequestRouteDirectionsBatchSync408Response;\nexport function isUnexpected(\n  response:\n    | RouteRequestRouteMatrixSync200Response\n    | RouteRequestRouteMatrixSync408Response\n    | RouteRequestRouteMatrixSyncDefaultResponse\n    | RouteGetRouteDirections200Response\n    | RouteGetRouteDirectionsDefaultResponse\n    | RouteGetRouteDirectionsWithAdditionalParameters200Response\n    | RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse\n    | RouteGetRouteRange200Response\n    | RouteGetRouteRangeDefaultResponse\n    | RouteRequestRouteDirectionsBatchSync200Response\n    | RouteRequestRouteDirectionsBatchSync408Response\n    | RouteRequestRouteDirectionsBatchSyncDefaultResponse\n): response is\n  | RouteRequestRouteMatrixSync408Response\n  | RouteRequestRouteMatrixSyncDefaultResponse\n  | RouteGetRouteDirectionsDefaultResponse\n  | RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse\n  | RouteGetRouteRangeDefaultResponse\n  | RouteRequestRouteDirectionsBatchSync408Response\n  | RouteRequestRouteDirectionsBatchSyncDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = geParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction geParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // If the candidate and actual paths don't match in size\n    // we move on to the next candidate path\n    if (\n      candidateParts.length === pathParts.length &&\n      hasParametrizedPath(key)\n    ) {\n      // track if we have found a match to return the values found.\n      let found = true;\n      for (let i = 0; i < candidateParts.length; i++) {\n        if (\n          candidateParts[i]?.startsWith(\"{\") &&\n          candidateParts[i]?.endsWith(\"}\")\n        ) {\n          // If the current part of the candidate is a \"template\" part\n          // it is a match with the actual path part on hand\n          // skip as the parameterized part can match anything\n          continue;\n        }\n\n        // If the candidate part is not a template and\n        // the parts don't match mark the candidate as not found\n        // to move on with the next candidate path.\n        if (candidateParts[i] !== pathParts[i]) {\n          found = false;\n          break;\n        }\n      }\n\n      // We finished evaluating the current candidate parts\n      // if all parts matched we return the success values form\n      // the path mapping.\n      if (found) {\n        return value;\n      }\n    }\n  }\n\n  // No match was found, return an empty array.\n  return [];\n}\n\nfunction hasParametrizedPath(path: string): boolean {\n  return path.includes(\"/{\");\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Client, HttpResponse } from \"@azure-rest/core-client\";\nimport {\n  LongRunningOperation,\n  LroEngine,\n  LroEngineOptions,\n  LroResponse,\n  PollerLike,\n  PollOperationState\n} from \"@azure/core-lro\";\n\n/**\n * Helper function that builds a Poller object to help polling a long running operation.\n * @param client - Client to use for sending the request to get additional pages.\n * @param initialResponse - The initial response.\n * @param options - Options to set a resume state or custom polling interval.\n * @returns - A poller object to poll for operation state updates and eventually get the final response.\n */\nexport function getLongRunningPoller<TResult extends HttpResponse>(\n  client: Client,\n  initialResponse: TResult,\n  options: LroEngineOptions<TResult, PollOperationState<TResult>> = {}\n): PollerLike<PollOperationState<TResult>, TResult> {\n  const poller: LongRunningOperation<TResult> = {\n    requestMethod: initialResponse.request.method,\n    requestPath: initialResponse.request.url,\n    sendInitialRequest: async () => {\n      // In the case of Rest Clients we are building the LRO poller object from a response that's the reason\n      // we are not triggering the initial request here, just extracting the information from the\n      // response we were provided.\n      return getLroResponse(initialResponse);\n    },\n    sendPollRequest: async (path) => {\n      // This is the callback that is going to be called to poll the service\n      // to get the latest status. We use the client provided and the polling path\n      // which is an opaque URL provided by caller, the service sends this in one of the following headers: operation-location, azure-asyncoperation or location\n      // depending on the lro pattern that the service implements. If non is provided we default to the initial path.\n      const response = await client\n        .pathUnchecked(path ?? initialResponse.request.url)\n        .get();\n      const lroResponse = getLroResponse(response as TResult);\n      lroResponse.rawResponse.headers[\"x-ms-original-url\"] =\n        initialResponse.request.url;\n      return lroResponse;\n    }\n  };\n\n  return new LroEngine(poller, options);\n}\n\n/**\n * Converts a Rest Client response to a response that the LRO engine knows about\n * @param response - a rest client http response\n * @returns - An LRO response that the LRO engine can work with\n */\nfunction getLroResponse<TResult extends HttpResponse>(\n  response: TResult\n): LroResponse<TResult> {\n  if (Number.isNaN(response.status)) {\n    throw new TypeError(\n      `Status code of the response is not a number. Value: ${response.status}`\n    );\n  }\n\n  return {\n    flatResponse: response,\n    rawResponse: {\n      ...response,\n      statusCode: Number.parseInt(response.status),\n      body: response.body\n    }\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ClientOptions } from \"@azure-rest/core-client\";\nimport {\n  AzureKeyCredential,\n  AzureSASCredential,\n  TokenCredential,\n  isSASCredential,\n  isTokenCredential,\n} from \"@azure/core-auth\";\nimport { createMapsClientIdPolicy } from \"@azure/maps-common\";\nimport { MapsRouteClient } from \"./generated\";\nimport createClient from \"./generated\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n\n/**\n * Creates an instance of MapsRouteClient from a subscription key.\n *\n * @example\n * ```ts\n * import MapsRoute from \"@azure-rest/maps-route\";\n * import { AzureKeyCredential } from \"@azure/core-auth\";\n *\n * const credential = new AzureKeyCredential(\"<subscription-key>\");\n * const client = MapsRoute(credential);\n *```\n *\n * @param credential - An AzureKeyCredential instance used to authenticate requests to the service\n * @param options - Options used to configure the Route Client\n */\nexport default function MapsRoute(\n  credential: AzureKeyCredential,\n  options?: ClientOptions,\n): MapsRouteClient;\n/**\n * Creates an instance of MapsRoute from an Azure Identity `TokenCredential`.\n *\n * @example\n * ```ts\n * import MapsRoute from \"@azure-rest/maps-route\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const credential = new DefaultAzureCredential();\n * const client = MapsRoute(credential, \"<maps-account-client-id>\");\n *```\n *\n * @param credential - An TokenCredential instance used to authenticate requests to the service\n * @param mapsAccountClientId - The Azure Maps client id of a specific map resource\n * @param options - Options used to configure the Route Client\n */\nexport default function MapsRoute(\n  credential: TokenCredential,\n  mapsAccountClientId: string,\n  options?: ClientOptions,\n): MapsRouteClient;\n/**\n * Creates an instance of MapsRoute from an Azure Identity `AzureSASCredential`.\n *\n * @example\n * ```ts\n * import MapsRoute from \"@azure-rest/maps-route\";\n * import { AzureSASCredential } from \"@azure/core-auth\";\n *\n * const credential = new AzureSASCredential(\"<SAS Token>\");\n * const client = MapsRoute(credential);\n * ```\n *\n * @param credential - An AzureSASCredential instance used to authenticate requests to the service\n * @param options - Options used to configure the Route Client\n */\nexport default function MapsRoute(\n  credential: AzureSASCredential,\n  options?: ClientOptions,\n): MapsRouteClient;\nexport default function MapsRoute(\n  credential: TokenCredential | AzureKeyCredential | AzureSASCredential,\n  clientIdOrOptions: string | ClientOptions = {},\n  maybeOptions: ClientOptions = {},\n): MapsRouteClient {\n  const options = typeof clientIdOrOptions === \"string\" ? maybeOptions : clientIdOrOptions;\n\n  /**\n   * maps service requires a header \"ms-x-client-id\", which is different from the standard AAD.\n   * So we need to do our own implementation.\n   * This customized authentication is following by this guide: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/RLC-customization.md#custom-authentication\n   */\n  if (isTokenCredential(credential)) {\n    const clientId = typeof clientIdOrOptions === \"string\" ? clientIdOrOptions : \"\";\n    if (!clientId) {\n      throw Error(\"Client id is needed for TokenCredential\");\n    }\n    const client = createClient(undefined as any, options);\n    client.pipeline.addPolicy(\n      bearerTokenAuthenticationPolicy({\n        credential,\n        scopes: `${options.baseUrl || \"https://atlas.microsoft.com\"}/.default`,\n      }),\n    );\n    client.pipeline.addPolicy(createMapsClientIdPolicy(clientId));\n    return client;\n  }\n\n  if (isSASCredential(credential)) {\n    const client = createClient(undefined as any, options);\n    client.pipeline.addPolicy({\n      name: \"mapsSASCredentialPolicy\",\n      async sendRequest(request, next) {\n        request.headers.set(\"Authorization\", `jwt-sas ${credential.signature}`);\n        return next(request);\n      },\n    });\n    return client;\n  }\n\n  return createClient(credential, options);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LatLon } from \"@azure/maps-common\";\nimport { BatchRequest, RouteGetRouteDirectionsQueryParamProperties } from \"./generated\";\n\nfunction toLatLonString(coordinates: LatLon): string {\n  return `${coordinates[0]},${coordinates[1]}`;\n}\n\n/**\n * Transform an array of [Latitude, Longtitute] to a string in the following format:\n * \"Latitude_1,Longtitute_1:Latitude_2,Longtitute_2:...\"\n *\n * @param coordinates - An array of Latitude/Longtitute pair to transform.\n * @returns The transformed string.\n */\nexport function toColonDelimitedLatLonString(coordinates: LatLon[]): string {\n  return coordinates.map((c) => toLatLonString(c)).join(\":\");\n}\n\n/**\n * Create a batch request body of a bunch of route direction requests.\n *\n * @param queryParamProperties - An object of the query parameters for a route direction request\n * @returns The composed batch request.\n */\nexport function createRouteDirectionsBatchRequest(\n  queryParamProperties: RouteGetRouteDirectionsQueryParamProperties[],\n): BatchRequest {\n  return {\n    batchItems: queryParamProperties.map((queryParam) => ({\n      query:\n        \"?\" +\n        Object.entries(queryParam)\n          .map(([k, v]) => {\n            // Skip if no value\n            if (typeof v === \"undefined\" || v === null) {\n              return \"\";\n            }\n            // Check name mappings: Array values\n            if ((k === \"departAt\" || k === \"arriveAt\") && v instanceof Date) {\n              return `${k}=${v.toISOString()}`;\n            }\n            return `${k}=${v}`;\n          })\n          .filter((s) => s !== \"\")\n          .join(\"&\"),\n    })),\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport MapsRoute from \"./mapsRoute\";\n\nexport * from \"./generated\";\nexport * from \"./helpers\";\n\nexport default MapsRoute;\n"],"names":["getClient","LroEngine","isTokenCredential","bearerTokenAuthenticationPolicy","createMapsClientIdPolicy","isSASCredential"],"mappings":"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"}