{"version":3,"file":"isUnexpected.js","sourceRoot":"","sources":["../../../src/generated/isUnexpected.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  RouteRequestRouteMatrixSync200Response,\n  RouteRequestRouteMatrixSync408Response,\n  RouteRequestRouteMatrixSyncDefaultResponse,\n  RouteGetRouteDirections200Response,\n  RouteGetRouteDirectionsDefaultResponse,\n  RouteGetRouteDirectionsWithAdditionalParameters200Response,\n  RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse,\n  RouteGetRouteRange200Response,\n  RouteGetRouteRangeDefaultResponse,\n  RouteRequestRouteDirectionsBatchSync200Response,\n  RouteRequestRouteDirectionsBatchSync408Response,\n  RouteRequestRouteDirectionsBatchSyncDefaultResponse\n} from \"./responses\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /route/matrix/{format}\": [\"200\", \"202\"],\n  \"GET /route/matrix/{format}\": [\"200\", \"202\"],\n  \"POST /route/matrix/sync/{format}\": [\"200\"],\n  \"GET /route/directions/{format}\": [\"200\"],\n  \"POST /route/directions/{format}\": [\"200\"],\n  \"GET /route/range/{format}\": [\"200\"],\n  \"POST /route/directions/batch/{format}\": [\"200\", \"202\"],\n  \"GET /route/directions/batch/{format}\": [\"200\", \"202\"],\n  \"POST /route/directions/batch/sync/{format}\": [\"200\"]\n};\n\nexport function isUnexpected(\n  response:\n    | RouteRequestRouteMatrixSync200Response\n    | RouteRequestRouteMatrixSync408Response\n    | RouteRequestRouteMatrixSyncDefaultResponse\n): response is RouteRequestRouteMatrixSync408Response;\nexport function isUnexpected(\n  response:\n    | RouteGetRouteDirections200Response\n    | RouteGetRouteDirectionsDefaultResponse\n): response is RouteGetRouteDirectionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | RouteGetRouteDirectionsWithAdditionalParameters200Response\n    | RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse\n): response is RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse;\nexport function isUnexpected(\n  response: RouteGetRouteRange200Response | RouteGetRouteRangeDefaultResponse\n): response is RouteGetRouteRangeDefaultResponse;\nexport function isUnexpected(\n  response:\n    | RouteRequestRouteDirectionsBatchSync200Response\n    | RouteRequestRouteDirectionsBatchSync408Response\n    | RouteRequestRouteDirectionsBatchSyncDefaultResponse\n): response is RouteRequestRouteDirectionsBatchSync408Response;\nexport function isUnexpected(\n  response:\n    | RouteRequestRouteMatrixSync200Response\n    | RouteRequestRouteMatrixSync408Response\n    | RouteRequestRouteMatrixSyncDefaultResponse\n    | RouteGetRouteDirections200Response\n    | RouteGetRouteDirectionsDefaultResponse\n    | RouteGetRouteDirectionsWithAdditionalParameters200Response\n    | RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse\n    | RouteGetRouteRange200Response\n    | RouteGetRouteRangeDefaultResponse\n    | RouteRequestRouteDirectionsBatchSync200Response\n    | RouteRequestRouteDirectionsBatchSync408Response\n    | RouteRequestRouteDirectionsBatchSyncDefaultResponse\n): response is\n  | RouteRequestRouteMatrixSync408Response\n  | RouteRequestRouteMatrixSyncDefaultResponse\n  | RouteGetRouteDirectionsDefaultResponse\n  | RouteGetRouteDirectionsWithAdditionalParametersDefaultResponse\n  | RouteGetRouteRangeDefaultResponse\n  | RouteRequestRouteDirectionsBatchSync408Response\n  | RouteRequestRouteDirectionsBatchSyncDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = geParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction geParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // If the candidate and actual paths don't match in size\n    // we move on to the next candidate path\n    if (\n      candidateParts.length === pathParts.length &&\n      hasParametrizedPath(key)\n    ) {\n      // track if we have found a match to return the values found.\n      let found = true;\n      for (let i = 0; i < candidateParts.length; i++) {\n        if (\n          candidateParts[i]?.startsWith(\"{\") &&\n          candidateParts[i]?.endsWith(\"}\")\n        ) {\n          // If the current part of the candidate is a \"template\" part\n          // it is a match with the actual path part on hand\n          // skip as the parameterized part can match anything\n          continue;\n        }\n\n        // If the candidate part is not a template and\n        // the parts don't match mark the candidate as not found\n        // to move on with the next candidate path.\n        if (candidateParts[i] !== pathParts[i]) {\n          found = false;\n          break;\n        }\n      }\n\n      // We finished evaluating the current candidate parts\n      // if all parts matched we return the success values form\n      // the path mapping.\n      if (found) {\n        return value;\n      }\n    }\n  }\n\n  // No match was found, return an empty array.\n  return [];\n}\n\nfunction hasParametrizedPath(path: string): boolean {\n  return path.includes(\"/{\");\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n"]}