{"version":3,"file":"index.js","sources":["../src/credential/createAzureMapsKeyCredentialPolicy.ts","../src/credential/createMapsClientIdPolicy.ts","../src/models/lro.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { KeyCredential } from \"@azure/core-auth\";\n\nconst API_KEY_HEADER_NAME = \"subscription-key\";\n\n/**\n * The programmatic identifier of the mapsAzureKeyCredentialPolicy.\n */\nconst azureMapsKeyCredentialPolicyName = \"mapsAzureKeyCredentialPolicy\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for Azure Maps\n */\nexport function createAzureMapsKeyCredentialPolicy(\n  azureKeyCredential: KeyCredential\n): PipelinePolicy {\n  return {\n    name: azureMapsKeyCredentialPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(API_KEY_HEADER_NAME)) {\n        request.headers.set(API_KEY_HEADER_NAME, azureKeyCredential.key);\n      }\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\n\nconst MAPS_CLIENT_ID_HEADER_NAME = \"x-ms-client-id\";\n\n/**\n * The programmatic identifier of the mapsTokenCredentialPolicy.\n */\nconst mapsClientIdPolicyName = \"mapsClientIdPolicy\";\n\n/**\n * Create an HTTP pipeline policy to add x-ms-client-id header\n * for `TokenCredential` based authentication for Azure Maps\n */\nexport function createMapsClientIdPolicy(mapsClientId: string): PipelinePolicy {\n  return {\n    name: mapsClientIdPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(MAPS_CLIENT_ID_HEADER_NAME)) {\n        request.headers.set(MAPS_CLIENT_ID_HEADER_NAME, mapsClientId);\n      }\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport {\n  FullOperationResponse,\n  OperationOptions,\n  OperationSpec,\n  ServiceClient,\n} from \"@azure/core-client\";\nimport { LroResponse } from \"@azure/core-lro\";\n\n/**\n * Extract several fields of the response to the rawResponse\n *\n * @param getResponse - A async function that actually call the backend API.\n * @param options - The options for the getResponse callback\n * @returns A promise for the API call.\n */\nexport async function getRawResponse<TOptions extends OperationOptions, TResponse>(\n  getResponse: (options: TOptions) => Promise<TResponse>,\n  options: TOptions\n): Promise<LroResponse<TResponse>> {\n  const { onResponse } = options || {};\n  let rawResponse: FullOperationResponse;\n  const flatResponse = await getResponse({\n    ...options,\n    onResponse: (response, flatResponseParam) => {\n      rawResponse = response;\n      onResponse?.(response, flatResponseParam);\n    },\n  });\n  return {\n    flatResponse,\n    rawResponse: {\n      statusCode: rawResponse!.status,\n      headers: rawResponse!.headers.toJSON(),\n      body: rawResponse!.parsedBody,\n    },\n  };\n}\n\n/**\n * Helper function to create a method that can be passed to sendPollRequest in createHttpPoller.\n *\n * @param settings - The settings of the poll request, including client, options and the spec\n * @returns A callback that accept the path as input and return the promise of Lro response.\n */\nexport function createSendPollRequest<\n  TOptions extends OperationOptions,\n  TClient extends ServiceClient\n>(settings: {\n  client: TClient;\n  options: TOptions;\n  spec: OperationSpec;\n}): (path: string) => Promise<LroResponse<unknown>> {\n  const { client, options, spec } = settings;\n  return async (path: string) =>\n    getRawResponse(\n      (paramOptions) => client.sendOperationRequest({ options: paramOptions }, { path, ...spec }),\n      options\n    );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAUA,MAAM,mBAAmB,GAAG,kBAAkB,CAAC;AAE/C;;AAEG;AACH,MAAM,gCAAgC,GAAG,8BAA8B,CAAC;AAExE;;;AAGG;AACG,SAAU,kCAAkC,CAChD,kBAAiC,EAAA;IAEjC,OAAO;AACL,QAAA,IAAI,EAAE,gCAAgC;AACtC,QAAA,MAAM,WAAW,CAAC,OAAwB,EAAE,IAAiB,EAAA;YAC3D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE;gBAC7C,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,GAAG,CAAC,CAAC;AAClE,aAAA;AACD,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;SACtB;KACF,CAAC;AACJ;;AClCA;AACA;AASA,MAAM,0BAA0B,GAAG,gBAAgB,CAAC;AAEpD;;AAEG;AACH,MAAM,sBAAsB,GAAG,oBAAoB,CAAC;AAEpD;;;AAGG;AACG,SAAU,wBAAwB,CAAC,YAAoB,EAAA;IAC3D,OAAO;AACL,QAAA,IAAI,EAAE,sBAAsB;AAC5B,QAAA,MAAM,WAAW,CAAC,OAAwB,EAAE,IAAiB,EAAA;YAC3D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,EAAE;gBACpD,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,YAAY,CAAC,CAAC;AAC/D,aAAA;AACD,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;SACtB;KACF,CAAC;AACJ;;ACrBA;;;;;;AAMG;AACI,eAAe,cAAc,CAClC,WAAsD,EACtD,OAAiB,EAAA;AAEjB,IAAA,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;AACrC,IAAA,IAAI,WAAkC,CAAC;AACvC,IAAA,MAAM,YAAY,GAAG,MAAM,WAAW,iCACjC,OAAO,CAAA,EAAA,EACV,UAAU,EAAE,CAAC,QAAQ,EAAE,iBAAiB,KAAI;YAC1C,WAAW,GAAG,QAAQ,CAAC;YACvB,UAAU,KAAA,IAAA,IAAV,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAG,QAAQ,EAAE,iBAAiB,CAAC,CAAC;AAC5C,SAAC,IACD,CAAC;IACH,OAAO;QACL,YAAY;AACZ,QAAA,WAAW,EAAE;YACX,UAAU,EAAE,WAAY,CAAC,MAAM;AAC/B,YAAA,OAAO,EAAE,WAAY,CAAC,OAAO,CAAC,MAAM,EAAE;YACtC,IAAI,EAAE,WAAY,CAAC,UAAU;AAC9B,SAAA;KACF,CAAC;AACJ,CAAC;AAED;;;;;AAKG;AACG,SAAU,qBAAqB,CAGnC,QAID,EAAA;IACC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;AAC3C,IAAA,OAAO,OAAO,IAAY,KACxB,cAAc,CACZ,CAAC,YAAY,KAAK,MAAM,CAAC,oBAAoB,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,EAAA,MAAA,CAAA,MAAA,CAAA,EAAI,IAAI,EAAA,EAAK,IAAI,CAAA,CAAG,EAC3F,OAAO,CACR,CAAC;AACN;;;;;;;"}